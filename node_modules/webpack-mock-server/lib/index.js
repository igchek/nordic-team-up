"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const compiler_1 = __importDefault(require("./compiler"));
const log_1 = __importDefault(require("./log"));
const mockServer_1 = __importDefault(require("./mockServer"));
const mockServerHelper_1 = __importDefault(require("./mockServerHelper"));
const mockServerMiddleware_1 = __importDefault(require("./mockServerMiddleware"));
const mockServerOptions_1 = require("./mockServerOptions");
const webpackMockServer = {
    /**
     * Applies webpackMiddleware on existed express-application
     * @param app expressjs application that is used for mapping-routes
     * @param extendOptions MockServerOptions that overrides default options
     */
    use(app, extendOptions = undefined) {
        const opt = Object.assign(Object.assign({}, mockServerOptions_1.defOptions), extendOptions);
        opt.compilerOptions = Object.assign(Object.assign(Object.assign({}, mockServerOptions_1.defOptions.compilerOptions), extendOptions === null || extendOptions === void 0 ? void 0 : extendOptions.compilerOptions), mockServerOptions_1.defOptions.strictCompilerOptions);
        log_1.default.verbose = opt.verbose;
        let isDefined = false;
        // important to apply middleware before we made hook otherwise post/put request will be rejected
        (0, mockServerMiddleware_1.default)(app, opt.port);
        let disposeAll = [];
        function setupHook(httpOrHttps) {
            const prev = httpOrHttps.createServer;
            disposeAll.push(() => {
                // eslint-disable-next-line no-param-reassign
                httpOrHttps.createServer = prev;
            });
            // eslint-disable-next-line no-param-reassign
            httpOrHttps.createServer = function hook() {
                // @ts-ignore
                const server = prev.apply(this, arguments);
                function parentServerCallback(err) {
                    if (isDefined) {
                        return;
                    }
                    isDefined = true;
                    disposeAll.forEach((d) => d());
                    disposeAll = [];
                    const address = server.address();
                    const parentPort = (address === null || address === void 0 ? void 0 : address.port) || (err === null || err === void 0 ? void 0 : err.port) || 8080;
                    log_1.default.debug("Parent server is started. Starting mock-server...");
                    // set another port because of httpServer in the same process overrides previous listenere
                    if (opt.port === parentPort) {
                        ++opt.port;
                    }
                    try {
                        (0, compiler_1.default)(opt.entry, opt.tsConfigFileName, opt.compilerOptions, (outFileNames) => {
                            (0, mockServer_1.default)(outFileNames, opt, (port) => {
                                (0, mockServerMiddleware_1.default)(app, port);
                            });
                        });
                    }
                    catch (ex) {
                        log_1.default.error("Unable to start server\n", ex);
                    }
                }
                server.once("listening", parentServerCallback);
                server.once("error", parentServerCallback);
                return server;
            };
        }
        setupHook.call(this, http_1.default);
        setupHook.call(this, https_1.default);
    },
    /**
     * Add mock functions into webackMockServer
     * @param mockFunction
     */
    add(mockFunction) {
        return (app) => {
            mockFunction(app, mockServerHelper_1.default);
        };
    },
    /** Default MockServer options (readonly) */
    get defaultOptions() {
        return JSON.parse(JSON.stringify(mockServerOptions_1.defOptions));
    },
};
module.exports = webpackMockServer;
