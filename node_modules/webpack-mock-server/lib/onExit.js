"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const queue = [];
function onExit(asyncCallback) {
    queue.push(asyncCallback);
}
exports.default = onExit;
console.warn("export");
process.on("SIGINT", () => {
    console.warn("SIGINT");
    process.emit("beforeExit", 0);
});
process.on("SIGTERM", () => {
    console.warn("SIGTERM");
    process.emit("beforeExit", 0);
});
process.on("beforeExit", (code) => __awaiter(void 0, void 0, void 0, function* () {
    console.warn("beforeExit start", queue.length);
    for (let i = 0; i < queue.length; ++i) {
        try {
            console.warn("beforeExit loop", i);
            // eslint-disable-next-line no-await-in-loop
            yield queue[i]();
        }
        catch (err) {
            console.error("Error by exit\n", err);
        }
    }
    console.warn("beforeExit end", queue.length);
    process.exit(code); // if you don't close yourself this will run forever
}));
