"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defOptions = void 0;
/* eslint-disable class-methods-use-this */
const typescript_1 = __importStar(require("typescript"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const versionContainer_1 = require("./versionContainer");
function defineTarget() {
    if (versionContainer_1.nodeJsVer.major >= 10) {
        return typescript_1.default.ScriptTarget.ES2017;
    }
    if (versionContainer_1.nodeJsVer.major >= 6) {
        return typescript_1.default.ScriptTarget.ES5;
    }
    return typescript_1.default.ScriptTarget.ES3;
}
const outDir = path_1.default.join(os_1.default.tmpdir(), "webpack-mock-server", new Date().getTime().toString());
class MockServerOptions {
    constructor() {
        /** Enable/disable console.log */
        this.verbose = false;
        /** Port for webpack-mock-server */
        this.port = 8079;
        /** Enable/disable console.log for requests */
        this.logRequests = false;
        /** Enable/disable console.log for reponses */
        this.logResponses = false;
        /** Typescript compiler options that override options from 'tsconfig.json' */
        this.compilerOptions = {
            strictNullChecks: false,
            noImplicitAny: false,
            noUnusedLocals: false,
            noUnusedParameters: false,
            skipLibCheck: true,
            resolveJsonModule: true,
            // todo wait for transpileOnly option: https://github.com/microsoft/TypeScript/issues/29651
        };
        /** Typescript config file (used for compilation [entry] files) */
        this.tsConfigFileName = "tsconfig.json";
        /**
         * Entry points for typescript-compiler
         * If pointed an 'empty array' or 'undefined' entry will be defined
         * from [tsConfigFileName]: 'files','include' and 'exclude' sections
         */
        this.entry = ["webpack.mock.ts"];
    }
    /** Must-have Typescript compiler options (impossible to override) */
    get strictCompilerOptions() {
        return {
            outDir,
            rootDir: process.cwd(),
            noEmit: false,
            noEmitHelpers: false,
            esModuleInterop: true,
            module: typescript_1.default.ModuleKind.CommonJS,
            declaration: false,
            moduelResolution: typescript_1.ModuleResolutionKind.NodeJs,
            target: defineTarget(),
        };
    }
}
exports.default = MockServerOptions;
exports.defOptions = new MockServerOptions();
