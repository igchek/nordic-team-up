import mongoose from "mongoose";

const venueSchema = new mongoose.Schema({
    contributors:{
        owners:[{
            type:mongoose.Schema.Types.ObjectId,
            ref:'user'
        }],
        managers:[{
            type:mongoose.Schema.Types.ObjectId,
            ref:'user'
        }],
        required:true
    },

    deploymentParams:{
        physical:{
            capacity:{
                minimal:{
                    type:Number,
                    required:false,
                    default:0
                },
                maximal:{
                    type:Number,
                    required:false
                },
                
                required:false
            },
            age:{
                minimal:{
                    type:Number,
                    required:false,
                    default:16
                },
                maximal:{
                    type:Number,
                    required:false
                },
                required:false
            }

        },
        temporal:{
            template:{
                monday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    }
                },
                tuesday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    }
                },
                wednsday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    },
                    required:false
                },
                thursday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    },
                    required:false
                },
                friday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    },
                    required:false
                },
                saturday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    },
                    required:false
                },
                sunday:{
                    isTenable:{
                        type:Boolean,
                        required:true,
                        default:true
                    },
                    start:{
                        type:Date,
                        required:false
                    },
                    finish:{
                        type:Date,
                        required:false
                    },
                    required:false
                }
            },
            specific:[{
                type:mongoose.Schema.Types.ObjectId,
                ref:'temporal frame'
            }],
            hosted:[{
                type:mongoose.Schema.Types.ObjectId,
                ref:'temporal frame'
            }]
        },
        technical:[{
            // TODO: gig build bricks be here. Just like time frames
            type:mongoose.Schema.Types.ObjectId,
            ref:'tech'
        }],
        financial:{
            template:{
                perHour:{
                    type:Number,
                    required:false
                },
                perDay:{
                    type:Number,
                    required:false
                },
                required:false
            },
            adjustment:[{
                type:mongoose.Schema.Types.ObjectId,
                ref:'temporal frame'
            }]
        },
        required:false

    },

    deployment:{
        external:{
            vibes:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'vibe'
            },
            gig:{
                type:mongoose.Schema.Types.ObjectId,
                ref:'gig'
            },
            required:false
        },
        internal:{
            vibes:[{
                type:mongoose.Schema.Types.ObjectId,
                ref:'vibe'
            }],
            gig:[{
                type:mongoose.Schema.Types.ObjectId,
                ref:'gig'
            }],
            required:false
        },
        required:false
    },


    description:{
        title:{
            type:String,
            required:true
        },
        subtitle:{
            role:{
                type:String,
                required:false
            },
            description:{
                type:String,
                required:false
            },
            required:false
        },
        tagLine:{
            selfAdjusted:[{
                type:String,
                ref:'tag'
            }],
            computed:[{
                type:String,
                ref:'tag'
            }],
            required:false
        },
        required:true

    },
    media:{
        logo:{
            type:String,
            required:true,
            default:'venueLogo'
        },
        header:{
            type:String,
            required:false,
            default:'hostHeader'
        },
        reel:[{
            type:String,
            ref:'reel'
        }],
        required:true
    },

    balanceSheet:{
        assets:{
            deposited:{
                quantity:{
                    type:Number,
                    required:false
                },
                gigs:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'gig'
                }],
                transactions:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'transaction'
                }],
                required:false,
                default:0

            },
            pending:{
                quantity:{
                    type:Number,
                    required:false
                },
                gigs:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'gig'
                }],
                transactions:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'transaction'
                }],
                required:false,
                default:0

            },
            required:false
            },
        obligations:{
            deposited:{
                quantity:{
                    type:Number,
                    required:false
                },
                gigs:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'gig'
                }],
                transactions:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'transaction'
                }],
                required:false,
                default:0

            },
            pending:{
                quantity:{
                    type:Number,
                    required:false
                },
                gigs:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'gig'
                }],
                transactions:[{
                    type:mongoose.Schema.Types.ObjectId,
                    ref:'transaction'
                }],
                required:false,
                default:0

            },
            required:false
        }
    }



})




const Venue = mongoose.models.Venue || mongoose.model('Venue', venueSchema)
export default Venue